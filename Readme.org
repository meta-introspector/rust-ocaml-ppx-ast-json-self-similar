** Self-Referential Pattern Detection in JSON Data**

**Introduction**

This repository contains a simple algorithm and code to detect self-referential patterns in JSON data. Self-referential patterns are where a key in a JSON object references a value that is itself a recursive definition of the same key.

**What is a Self-Referential Pattern?**

A self-referential pattern is a design pattern that involves a key in a JSON object referencing a value that is itself a recursive definition of the same key. This means that the key is defined in terms of itself.

**Why are Self-Referential Patterns Important?**

Self-referential patterns are important because they can help us understand recursive definitions and patterns in programming languages. They can also be used to identify self-referential data structures in database systems or other data storage systems.

**How Does it Work?**

The algorithm works by traversing the JSON object recursively, exploring each node and its children. At each node, it checks if the key matches any of the values in the node's children. If a match is found, it checks if the value is itself a recursive definition of the same key. If the value is a recursive definition, then it has found an instance of the self-referential pattern.

**Key Features**

* Detects self-referential patterns in JSON data
* Independent of the specific AST (Abstract Syntax Tree) or compiler dump format
* Compiler dump agnostic
* Simple and efficient algorithm
* Can be applied to various domains and industries

**Use Cases**

* Analyzing compiler dumps to understand recursive definitions and patterns in programming languages
* Identifying self-referential data structures in database systems or other data storage systems
* Detecting recursive patterns in graph data structures or network analysis

**Algorithm Steps**

1. Traverse the JSON object recursively, exploring each node and its children
2. At each node, check if the key matches any of the values in the node's children
3. If a match is found, check if the value is itself a recursive definition of the same key
4. If the value is a recursive definition, then it has found an instance of the self-referential pattern

**Example Output**

```
Found match: pld_name : txt2 = pld_name
CONTAINS KEY=pld_name VALUE={"loc2":{"loc_end":{"pos_bol":21711,"pos_cnum":21724,"pos_fname":"./_opam/lib/ocaml/compiler-libs/parsetree.mli","pos_lnum":561},"loc_ghost":false,"loc_start":{"pos_bol":21711,"pos_cnum":21716,"pos_fname":"./_opam/lib/ocaml/compiler-libs/parsetree.mli","pos_lnum":561}},"txt2":"pld_name"}
```

**Future Research Directions**

* Investigating the properties and characteristics of self-referential data structures
* Developing new algorithms and techniques for searching and identifying self-referential patterns in large datasets
* Exploring the applications of self-referential patterns in different domains and industries

**Run the Code**

To run the code, simply clone this repository and execute the script on your JSON data.

Example 
#+begin_src shell
RUST_BACKTRACE=1 cargo run ~/2023/12/28/ppxlib/ocaml-opam-ppxlib-json-ast/ocaml/parsing/parsetree.mli.sig
#+end_src


** Report

*** Implementation
|  Count | name |
|  1 | pc_lhs     |
|  1 | pc_rhs     |
|  1 | pld_name   |
|  1 | ptype_kind |
|  2 | pmb_expr   |
|  2 | pvb_pat    |
|  3 | pmod_desc  |
| 14 | ppat_desc  |
| 14 | pvb_expr   |
| 16 | pstr_desc  |
| 17 | pexp_desc  |

*** Signatures

|  Count | name |
|  5 | pld_name   |
|  5 | psig_desc  |
|  5 | ptype_kind |
| 13 | pexp_desc  |

So the only common between signature and implementations is ptype_kind


* simple test
./target/debug/self-similar /time/2023/12/28/ppxlib/ocaml-opam-ppxlib-json-ast/ocaml/_opam/lib/ocaml/compiler-libs/parsetree.mli.sig > report1.txt

* modes of operation
* decide vs act
* orentation of observed inputs
** building models
*** json schemas
* transformation
* recontextualization
adding of context
removing of context
* 
* observe vs act
* output vs input
* dynamic vs static
* changing vs constant
* contingent vs declared
* Attributes vs Features
** Exfiltration vs Introspection.
** Introspection is viewing inward
** actions taken for observability of view, stalking your prey, hunting.
directed action towards hunger
basic economic behaviour
basic survival instinct
biological needs
biological instinct
** genetic programs
*** environmental information
***** abundance of food
** meta programming
creation of memes from genes, observing and cataloging genes must be an instinctual behaviour.
*** shaman technology
magical rituals surrounding technlogy. cargo cult.

** Public vs Private
exfiltration is the taking private information public that can be used against a party,
this is unilateral action that can be taken that disturbs the nash equlibrium.
we can see the cat and mouse game of security that creates a temporal barrier.
introspection can be see as involving obserability improving behaviours that collect intelligence
on a target. We want to modify existing software to surface information in a standardized manner.
We can consider this to be intelligence gathering or observability enginnering.
Open source software can be modified to expose internal information that the authors
did not indend for being exposed.
This is the freedom of usage for any purposes clause of the free software licenses that the
free software foundation and others do not like to talk about.
Novel usages of the software to increase observability and reuse of the software
as a tool for knowledge extraction that is what I consider introspection.
